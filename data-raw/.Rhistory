scenario_a <- stratified(N = 100, s = 3, t = 2, seed = 8967)
print(scenario_a)
scenario_b <- stratified(N = 200, s = 3, t = 3, stratum_sizes = c(80, 70, 50), seed = 1245)
print(scenario_b)
scenario_c <- stratified(N = 60, s = 3, t = 5, seed = 19075)
print(scenario_c)
scenario_d <- stratified(N = 450, s = 9, t = 4, seed = 632)
print(scenario_d)
scenario_e <- stratified(N = 100, s = 2, t = 6, stratum_sizes = c(60, 40), seed = 3421)
print(scenario_e)
source("~/Desktop/Advanced SAS : R/HW6/Wan_Xunyun_FUNCTIONS.R")
source("~/Desktop/Advanced SAS : R/HW6/Wan_Xunyun_FUNCTIONS.R")
library(dplyr)
model <- lm(InfantMortality ~ Income + OilExporting, data = data_set)
library(dplyr)
library(carData)
# remove all the missing data
df = Leinhardt |>
na.omit()
model <- lm(InfantMortality ~ Income + OilExporting, data = data_set)
View(df)
library(dplyr)
library(carData)
# remove all the missing data
df = Leinhardt |>
na.omit()
model <- lm(InfantMortality ~ Income + OilExporting, data = df)
model <- lm(infant ~ income + oil, data = df)
# Get the summary of the model
model_summary <- summary(model)
# Print the adjusted R-squared value
print(model_summary$adj.r.squared)
# Get the summary of the model
model_summary <- summary(model)
library(dplyr)
library(carData)
# remove all the missing data
df = Leinhardt |>
na.omit()
model <- lm(infant ~ income + oil, data = df)
# Get the summary of the model
model_summary <- summary(model)
model_summary
# Print the adjusted R-squared value
print(model_summary$adj.r.squared)
# Print the adjusted R-squared value
cat(c("The adjusted R^2 is",model_summary$adj.r.squared))
# Print the adjusted R-squared value
cat(c("The adjusted R^2 is",round(model_summary$adj.r.squared,4)))
model <- lm(infant ~ income + oil, data = df)
# Plot the diagnostics
par(mfrow = c(2, 2)) # Sets the plotting area into a 2x2 array
plot(model)
library(ggfortify)
# Plot the diagnosis plots
autoplot(model_1, which = 1:6, label.size = 3, size = 0.5)
# Plot the diagnosis plots
autoplot(model, which = 1:6, label.size = 3, size = 0.5)
library(ggfortify)
# Plot the diagnosis plots
autoplot(model_1, which = 1:6, label.size = 3, size = 0.5)
model <- lm(infant ~ income + oil, data = df)
# Plot the diagnostics
par(mfrow = c(2, 2)) # Sets the plotting area into a 2x2 array
plot(model)
library(ggfortify)
# Plot the diagnosis plots
autoplot(model_1, which = 1:6, label.size = 3, size = 0.5)
library(carData)
# remove all the missing data
df = Leinhardt |>
na.omit()
# fir a MLR
model_1= lm(infant~ income+relevel(factor(oil),ref='no'), data=df)
summary(model_1)
# get adjusted R^2
model_ars = summary(model_1)$adj.r.squared
model_ars
library(ggfortify)
# Plot the diagnosis plots
autoplot(model_1, which = 1:6, label.size = 3, size = 0.5)
library(ggplot2)
library(gridExtra)
p1 = ggplot(df,aes(x=infant))+
geom_histogram() +
ggtitle("Histogram of infant")
p2 = ggplot(df,aes(x=log(infant)))+
geom_histogram() +
ggtitle("Histogram of log(infant)")
grid.arrange(p1, p2, ncol = 2)
library(ggfortify)
# Plot the diagnosis plots
autoplot(model, which = 1:6, label.size = 3, size = 0.5)
library(ggplot2)
library(gridExtra)
p1 = ggplot(df,aes(x=infant))+
geom_histogram() +
ggtitle("Histogram of infant")
p2 = ggplot(df,aes(x=income))+
geom_histogram() +
ggtitle("Histogram of income")
grid.arrange(p1, p2, ncol = 2)
library(ggplot2)
library(gridExtra)
p1 = ggplot(df,aes(x=infant))+
geom_histogram() +
ggtitle("Histogram of infant")
p2 = ggplot(df,aes(x=income))+
geom_histogram() +
ggtitle("Histogram of income")
grid.arrange(p1, p2, ncol = 2)
df$log_income = log(df$income)
df$log_infant = log(df$infant)
summary(model_2)
model_2 <-lm( log_infant ~ log_income + relevel(factor(oil),ref='no'), df)
summary(model_2)
revised_model <- lm(log(infant) ~ log(income) + oil, df)
summary(revised_model)
wts <- 1/sqrt(abs(resid(revised_model)))
revised_model2 <-lm( log(infant) ~ log(income) +oil, df, weights = wts)
summary(revised_model2)
# Try using the square root of the residuals as weights
wts <- 1/sqrt(abs(resid(model_2)))
model_3 <-lm( log_infant ~ log_income + relevel(factor(oil),ref='no'), df, weights = wts)
summary(model_3)
autoplot(revised_model2, which = 1:6, label.size = 3, size = 0.5)
autoplot(model_3, which = 1:6, label.size = 3, size = 0.5)
outliers = c("Saudi.Arabia", "Libya", "Iraq")
df_2 = df[!rownames(df) %in% outliers, ]
revised_model3 <-lm(log(infant) ~ log(income) + oil, df_2)
wts_2 <- 1/sqrt(abs(resid(revised_model3)))
revised_model4 <-lm(log(infant) ~ log(income), df_2, weights = wts_2)
summary(revised_model4)
df_2 = df[!rownames(df) %in% outliers, ]
outliers = c("Saudi.Arabia", "Libya", "Iraq")
df_2 = df[!rownames(df) %in% outliers, ]
df_2$log_income = log(df_2$income)
df_2$log_infant = log(df_2$infant)
model_4 <-lm( log_infant ~ log_income + relevel(factor(oil),ref='no'), df_2)
wts_2 <- 1/sqrt(abs(resid(model_4)))
summary(model_5)
model_5 <-lm( log_infant ~ log_income + relevel(factor(oil),ref='no'), df_2, weights = wts_2)
summary(model_5)
```{r}
summary(revised_model4)$adj.r.squared
summary(revised_model4)$adj.r.squared
cat(c("The adjusted R^2 is",round(summary(revised_model4)$adj.r.squared,4)))
summary(revised_model4)
summary(revised_model4)
revised_model4 <-lm(log(infant) ~ log(income)+oil, df_2, weights = wts_2)
summary(revised_model4)
library(usethis)
use_gpl_license(version = 2)
setwd("~/Desktop/Data Science Software Systems/BIS620")
> library(usethis)
library(usethis)
use_gpl_license(version = 2)
use_gpl_license(version = 2)
Title: Functions and Data for BIS620 (2023)
library(usethis)
use_gpl_license(version = 2)
use_gpl_license(version = 2)
library(usethis)
use_gpl_license(version = 2)
library(usethis)
use_gpl_license(version = 2)
âœ” Setting active project to '/Users/serena/Desktop/Data Science Software Systems/BIS620'
library(usethis)
use_gpl_license(version=2)
library(devtools)
load_all()
hello()
?hello
use_roxygen_md()
dplyr:::add_count()
dplyr:::add_count_
load_all()
load_all
load_all()
document()
document()
document()
document()
check()
document()
check()
hello("people in BIS620")
?hello
use_testthat()
library(covr)
install.packages(covr)
install.packages("covr")
library(covr)
?use_test
use_test("hello")
report()
test()
test()
report()
test()
test()
report()
report()
use_data_raw()
setwd("~/Desktop/Data Science Software Systems/BIS620/data-raw")
setwd("~/Desktop/Data Science Software Systems/BIS620/data-raw")
library(tibble)
accel
accel
accel = readRDS("accel.rds")
usethis::use_data(DATASET, overwrite = TRUE)
accel
accel
accel = readRDS("accel.rds")
usethis::use_data(accel, overwrite = TRUE)
load("../data/accel.rda",verbose=TRUE)
load_all()
data(accel)
accel
accel$X[1]=0
accel
document()
?accel
?accel
document()
dim(accel)
document()
browseVignettes()
library(devtools)
document()
data(accel)
accel
library(ggplot2)
accel |> head(1000) |> pivot_longer(-time)
library(tidyr)
accel |> head(1000) |> pivot_longer(-time)
?pivot_longer
accel |> head(1000) |> pivot_longer(-time, values_to = "Acceleration", names_to = "Channel")
accel |> head(1000) |> pivot_longer(-time, values_to = "Acceleration", names_to = "Channel") |> ggplot(aes(x=Channel, y = Acceleration)) +geom_line() + facet_grid(Channel ~.)
accel |> head(1000) |> pivot_longer(-time, values_to = "Acceleration", names_to = "Channel") |> ggplot(aes(x=time, y = Acceleration)) +geom_line() + facet_grid(Channel ~.)
?values_to
?values_to()
plot_accel(accel |> head(1000))
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
plot_accel(accel |> head(1000))
plot_accel(accel |> head(1000)) |> theme_bw()
plot_accel(accel |> head(1000)) +theme_bw()
plot_accel(accel |> head(1000)) + theme_minimal()
x = plot_accel(accel |> head(1000))
x = accel |> head(1000)
document()
Browse[1] >x
special_signature(x)
x = accel |> head(1000)
source("~/Desktop/Data Science Software Systems/BIS620/R/spectral.R")
document()
special_signature(x)
spectral_signature(x)
.x = x[[1]]
fft(.x, inverse = inverse)
.x = x[[2]]
fft(.x, inverse = inverse)
.x = x[[2]]
fft(.x, inverse = inverse)
fft(.x, inverse = inverse) |> head()
fft(.x|>head(300), inverse = inverse) |> Mod() |>plot()
fft(.x|>head(150), inverse = inverse) |> Mod() |>plot()
fft(.x, inverse = inverse) |> Mod() |> head(100) |>plot()
map_dfc(
x |> select(X, Y, Z),
~ fft(.x, inverse = inverse) |> Mod()
)
spectral_signature(x)
spectral_signature(x) |> plot_accel(x_var= "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x) |> plot_accel(x_var= "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x) |> plot_accel(x_var= "freq")
document()
spectral_signature(x) |> plot_accel(x_var= "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x) |> plot_accel(x_var= "freq")
x|> pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel")
spectral_signature(x) |> plot_accel(x_var= "freq")
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel")
spectral_signature(x)
source("~/Desktop/Data Science Software Systems/BIS620/R/spectral.R")
spectral_signature(x)
spectral_signature(x) |> plot_accel(x_var= "freq")
document()
spectral_signature(x) |> plot_accel(x_var= "freq")
document()
spectral_signature(x)
spectral_signature(x) |> plot_accel(x_var= "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
document()
spectral_signature(x) |> plot_accel(x_var= "freq")
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel")
spectral_signature(x) |> plot_accel(x_var= "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x) |> plot_accel(x_var= "freq")
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel")
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x=!!x_var, y = Acceleration)) +
geom_line() +
facet_grid(Channel ~.)
x_var
x |>
+     pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
+     ggplot(aes(x=freq, y = Acceleration)) +
+     geom_line() +
+     facet_grid(Channel ~.)
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x=freq, y = Acceleration)) +
geom_line() +
facet_grid(Channel ~.)
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x=freq, y = Acceleration)) +
geom_line() +
facet_grid(Channel ~.)
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x=as.symbol(freq), y = Acceleration)) +
geom_line() +
facet_grid(Channel ~.)
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x=!!as.symbol(freq), y = Acceleration)) +
geom_line() +
facet_grid(Channel ~.)
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x=!!as.symbol(x_var), y = Acceleration)) +
#ggplot(aes(x=!!as.symbol(freq), y = Acceleration)) +
geom_line() +
facet_grid(Channel ~.)
x |>
pivot_longer(-!!x_var, values_to = "Acceleration", names_to = "Channel") |>
ggplot(aes(x=!!as.symbol(x_var), y = Acceleration)) +
#ggplot(aes(x=!!as.symbol(freq), y = Acceleration)) +
geom_line() +
facet_grid(Channel ~.)
document()
spectral_signature(x) |>plot_accel(x_var = "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
source("~/Desktop/Data Science Software Systems/BIS620/R/spectral.R")
spectral_signature(x) |>plot_accel(x_var = "freq")
spectral_signature(x) |>plot_accel(x_var = "freq")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
spectral_signature(x) |> plot_accel(x_var = "freq")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x) |> plot_accel(x_var = "freq")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
document()
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
spectral_signature(x,take_log = TRUE) |> filter(freq<25) |> plot_accel(x_var = "freq")
spectral_signature(x,take_log = TRUE) |> plot_accel(x_var = "freq")
document()
check()
check()
check()
document()
check()
document()
check()
check()
document()
check()
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
library(usethis)
source("~/Desktop/Data Science Software Systems/BIS620/R/globals.R")
document()
check()
document()
check()
covr::report()
library(usethis)
use_vignette("Spectral Signatures")
use_vignette("spectral-signatures")
library(BIS620)
INSTALL
install
install()
library(BIS620)
library(lubridate)
library(lubridate)
data(accel)
t1 = accel$time[50000]
accel |>
filter(time >t1 & time <= t1+ minutes(5)) |>
spec_sig(take_log = TRUE) |>
filter(freq <= 3) |>
plot_accel(x_var = "freq") +
theme_bw()
library(dplyr)
library(ggplot2)
t1 = accel$time[50000]
accel |>
filter(time >t1 & time <= t1+ minutes(5)) |>
spec_sig(take_log = TRUE) |>
filter(freq <= 3) |>
plot_accel(x_var = "freq") +
theme_bw()
document()
library(BIS620)
library(lubridate)
library(dplyr)
library(ggplot2)
data(accel)
t1 = accel$time[50000]
accel |>
filter(time >t1 & time <= t1+ minutes(5)) |>
spec_sig(take_log = TRUE) |>
filter(freq <= 3) |>
plot_accel(x_var = "freq") +
theme_bw()
library(BIS620)
library(lubridate)
library(dplyr)
library(ggplot2)
data(accel)
t1 = accel$time[50000]
accel |>
filter(time >t1 & time <= t1+ minutes(5)) |>
spec_sig(take_log = TRUE) |>
filter(freq <= 3) |>
plot_accel(x_var = "freq") +
theme_bw()
accel |>
filter(time >t1 & time <= t1+ minutes(5)) |>
spec_sig(take_log = TRUE) |>
filter(freq <= 3) |>
plot_accel(x_var = "freq") +
theme_bw()
document()
check()
document()
source("~/Desktop/Data Science Software Systems/BIS620/R/hello.R")
check()
documentï¼ˆï¼‰
document9)
document()
library(testthat)
library(usethis)
use_test("spec-sig")
accel |> head() |> spec_sig()
accel
test_that("spec_sig() works", {
data(accel)
expect_snapshot(accel |> head() |> spec_sig())
})
test()
test()
library(covr)
report()
use_test("plot-accel")
test_that("plot_accel() works", {
data(accel)
vdiffr::expect_doppelganger(accel|>head(100)|>plot_accel())
})
vdiffr::expect_doppelganger(accel|>head(100)|>plot_accel())
document()
test_that("plot_accel() works", {
data(accel)
vdiffr::expect_doppelganger(accel|>head(100)|>plot_accel())
})
accel |> head(100) |>plot_accel()
test()
?expect_doppelganger
test()
source("~/Desktop/Data Science Software Systems/BIS620/R/plot.R")
test()
document()
test()
test()
testthat::snapshot_review('plot-accel/')
install.packages(("diffviewer"))
testthat::snapshot_review('plot-accel/')
testthat::snapshot_review('plot-accel/')
document()
test()
testthat::snapshot_review('plot-accel/')
testthat::snapshot_review('plot-accel-1/')
testthat::snapshot_review('plot-accel-1.new/')
library(shiny)
testthat::snapshot_review('plot-accel/')
test()
covr::report()
covr::report()
document()
covr::report()
